diff --git a/app/test/meson.build b/app/test/meson.build
index 7d909039ae..85eb25f366 100644
--- a/app/test/meson.build
+++ b/app/test/meson.build
@@ -142,6 +142,7 @@ source_file_deps = {
     'test_power.c': ['power'],
     'test_power_cpufreq.c': ['power'],
     'test_power_intel_uncore.c': ['power'],
+    'test_power_amd_uncore.c': ['power'],
     'test_power_kvm_vm.c': ['power'],
     'test_prefetch.c': [],
     'test_rand_perf.c': [],
diff --git a/app/test/test_power_amd_uncore.c b/app/test/test_power_amd_uncore.c
new file mode 100644
index 0000000000..f8ab24e7cc
--- /dev/null
+++ b/app/test/test_power_amd_uncore.c
@@ -0,0 +1,302 @@
+/* SPDX-License-Identifier: BSD-3-Clause
+ * Copyright(c) 2024 AMD
+ */
+
+#include "test.h"
+
+#ifndef RTE_LIB_POWER
+
+static int
+test_power_amd_uncore(void)
+{
+	printf("Power management library not supported, skipping test\n");
+	return TEST_SKIPPED;
+}
+
+#else
+#include <rte_power_uncore.h>
+#include <power_common.h>
+
+#define MAX_UNCORE_FREQS 32
+
+#define VALID_PKG 0
+#define VALID_DIE 0
+#define INVALID_PKG (rte_power_uncore_get_num_pkgs() + 1)
+#define INVALID_DIE (rte_power_uncore_get_num_dies(VALID_PKG) + 1)
+#define VALID_INDEX 1
+#define INVALID_INDEX (MAX_UNCORE_FREQS + 1)
+
+static int check_power_uncore_init(void)
+{
+	int ret;
+
+	/* Test initialisation of uncore configuration*/
+	ret = rte_power_uncore_init(VALID_PKG, VALID_DIE);
+	if (ret < 0) {
+		printf("Cannot initialise uncore power management for pkg %u die %u, this "
+			"may occur if environment is not configured "
+			"correctly(APCI cpufreq) or operating in another valid "
+			"Power management environment\n", VALID_PKG, VALID_DIE);
+		return -1;
+	}
+
+	/* Unsuccessful Test */
+	ret = rte_power_uncore_init(INVALID_PKG, INVALID_DIE);
+	if (ret == 0) {
+		printf("Unexpectedly was able to initialise uncore power management "
+			"for pkg %u die %u\n", INVALID_PKG, INVALID_DIE);
+		return -1;
+	}
+
+	return 0;
+}
+
+static int
+check_power_get_uncore_freq(void)
+{
+	int ret;
+
+	/* Successfully get uncore freq */
+	ret = rte_power_get_uncore_freq(VALID_PKG, VALID_DIE);
+	if (ret < 0) {
+		printf("Failed to get uncore frequency for pkg %u die %u\n",
+							VALID_PKG, VALID_DIE);
+		return -1;
+	}
+
+	/* Unsuccessful Test */
+	ret = rte_power_get_uncore_freq(INVALID_PKG, INVALID_DIE);
+	if (ret >= 0) {
+		printf("Unexpectedly got invalid uncore frequency for pkg %u die %u\n",
+							INVALID_PKG, INVALID_DIE);
+		return -1;
+	}
+
+	return 0;
+}
+
+static int
+check_power_set_uncore_freq(void)
+{
+	int ret;
+
+	/* Successfully set uncore freq */
+	ret = rte_power_set_uncore_freq(VALID_PKG, VALID_DIE, VALID_INDEX);
+	if (ret < 0) {
+		printf("Failed to set uncore frequency for pkg %u die %u index %u\n",
+							VALID_PKG, VALID_DIE, VALID_INDEX);
+		return -1;
+	}
+
+	/* Try to unsuccessfully set invalid uncore freq index */
+	ret = rte_power_set_uncore_freq(VALID_PKG, VALID_DIE, INVALID_INDEX);
+	if (ret == 0) {
+		printf("Unexpectedly set invalid uncore index for pkg %u die %u index %u\n",
+							VALID_PKG, VALID_DIE, INVALID_INDEX);
+		return -1;
+	}
+
+	/* Unsuccessful Test */
+	ret = rte_power_set_uncore_freq(INVALID_PKG, INVALID_DIE, VALID_INDEX);
+	if (ret == 0) {
+		printf("Unexpectedly set invalid uncore frequency for pkg %u die %u index %u\n",
+							INVALID_PKG, INVALID_DIE, VALID_INDEX);
+		return -1;
+	}
+
+	return 0;
+}
+
+static int
+check_power_uncore_freq_max(void)
+{
+	int ret;
+
+	/* Successfully get max uncore freq */
+	ret = rte_power_uncore_freq_max(VALID_PKG, VALID_DIE);
+	if (ret < 0) {
+		printf("Failed to set max uncore frequency for pkg %u die %u\n",
+							VALID_PKG, VALID_DIE);
+		return -1;
+	}
+
+	/* Unsuccessful Test */
+	ret = rte_power_uncore_freq_max(INVALID_PKG, INVALID_DIE);
+	if (ret == 0) {
+		printf("Unexpectedly set invalid max uncore frequency for pkg %u die %u\n",
+							INVALID_PKG, INVALID_DIE);
+		return -1;
+	}
+
+	return 0;
+}
+
+static int
+check_power_uncore_freq_min(void)
+{
+	int ret;
+
+	/* Successfully get min uncore freq */
+	ret = rte_power_uncore_freq_min(VALID_PKG, VALID_DIE);
+	if (ret < 0) {
+		printf("Failed to set min uncore frequency for pkg %u die %u\n",
+							VALID_PKG, VALID_DIE);
+		return -1;
+	}
+
+	/* Unsuccessful Test */
+	ret = rte_power_uncore_freq_min(INVALID_PKG, INVALID_DIE);
+	if (ret == 0) {
+		printf("Unexpectedly set invalid min uncore frequency for pkg %u die %u\n",
+							INVALID_PKG, INVALID_DIE);
+		return -1;
+	}
+
+	return 0;
+}
+
+static int
+check_power_uncore_get_num_freqs(void)
+{
+	int ret;
+
+	/* Successfully get number of uncore freq */
+	ret = rte_power_uncore_get_num_freqs(VALID_PKG, VALID_DIE);
+	if (ret < 0) {
+		printf("Failed to get number of uncore frequencies for pkg %u die %u\n",
+							VALID_PKG, VALID_DIE);
+		return -1;
+	}
+
+	/* Unsuccessful Test */
+	ret = rte_power_uncore_get_num_freqs(INVALID_PKG, INVALID_DIE);
+	if (ret >= 0) {
+		printf("Unexpectedly got number of invalid frequencies for pkg %u die %u\n",
+							INVALID_PKG, INVALID_DIE);
+		return -1;
+	}
+
+	return 0;
+}
+
+static int
+check_power_uncore_get_num_pkgs(void)
+{
+	int ret;
+
+	/* Successfully get number of uncore pkgs */
+	ret = rte_power_uncore_get_num_pkgs();
+	if (ret == 0) {
+		printf("Failed to get number of uncore pkgs\n");
+		return -1;
+	}
+
+	return 0;
+}
+
+static int
+check_power_uncore_get_num_dies(void)
+{
+	int ret;
+
+	/* Successfully get number of uncore dies */
+	ret = rte_power_uncore_get_num_dies(VALID_PKG);
+	if (ret == 0) {
+		printf("Failed to get number of uncore dies for pkg %u\n",
+							VALID_PKG);
+		return -1;
+	}
+
+	/* Unsuccessful test */
+	ret = rte_power_uncore_get_num_dies(INVALID_PKG);
+	if (ret > 0) {
+		printf("Unexpectedly got number of invalid dies for pkg %u\n",
+							INVALID_PKG);
+		return -1;
+	}
+
+	return 0;
+}
+
+static int
+check_power_uncore_exit(void)
+{
+	int ret;
+
+	/* Successfully exit uncore power management */
+	ret = rte_power_uncore_exit(VALID_PKG, VALID_DIE);
+	if (ret < 0) {
+		printf("Failed to exit uncore power management for pkg %u die %u\n",
+							VALID_PKG, VALID_DIE);
+	}
+
+	/* Unsuccessful Test */
+	ret = rte_power_uncore_exit(INVALID_PKG, INVALID_DIE);
+	if (ret == 0) {
+		printf("Unexpectedly was able to exit uncore power management for pkg %u die %u\n",
+							INVALID_PKG, INVALID_DIE);
+		return -1;
+	}
+
+	return 0;
+}
+
+static int
+test_power_amd_uncore(void)
+{
+	int ret;
+
+	ret = rte_power_set_uncore_env(RTE_UNCORE_PM_ENV_AMD_HSMP);
+	if (ret < 0)
+		goto fail_all;
+
+	ret = rte_power_uncore_get_num_pkgs();
+	if (ret < 0) {
+		return TEST_SKIPPED;
+	}
+
+	ret = check_power_uncore_init();
+	if (ret < 0)
+		goto fail_all;
+
+	ret = check_power_get_uncore_freq();
+	if (ret < 0)
+		goto fail_all;
+
+	ret = check_power_set_uncore_freq();
+	if (ret < 0)
+		goto fail_all;
+
+	ret = check_power_uncore_freq_max();
+	if (ret < 0)
+		goto fail_all;
+
+	ret = check_power_uncore_freq_min();
+	if (ret < 0)
+		goto fail_all;
+
+	ret = check_power_uncore_get_num_freqs();
+	if (ret < 0)
+		goto fail_all;
+
+	ret = check_power_uncore_get_num_pkgs();
+	if (ret < 0)
+		goto fail_all;
+
+	ret = check_power_uncore_get_num_dies();
+	if (ret < 0)
+		goto fail_all;
+
+	ret = check_power_uncore_exit();
+	if (ret < 0)
+		return -1;
+
+	return 0;
+
+fail_all:
+	rte_power_uncore_exit(VALID_PKG, VALID_DIE);
+	return -1;
+}
+#endif
+
+REGISTER_FAST_TEST(power_amd_uncore_autotest, true, true, test_power_amd_uncore);
diff --git a/config/meson.build b/config/meson.build
index 8c8b019c25..70d8e373ac 100644
--- a/config/meson.build
+++ b/config/meson.build
@@ -291,6 +291,31 @@ if pcap_dep.found() and cc.has_header('pcap.h', dependencies: pcap_dep)
     dpdk_extra_ldflags += '-l@0@'.format(pcap_lib)
 endif
 
+# check if build env has AMD uncore library
+dpdk_conf.set('RTE_HAS_LIBAMDUNCORE', 0)
+amd_uncore_dep_static = dependency('e_smi64', required: false, method: 'pkg-config', static: true)
+amd_uncore_dep_shared = dependency('e_smi64', required: false, method: 'pkg-config', static: false)
+
+if amd_uncore_dep_static.found()
+  dpdk_conf.set('RTE_HAS_LIBAMDUNCORE', 1)
+elif amd_uncore_dep_shared.found()
+  dpdk_conf.set('RTE_HAS_LIBAMDUNCORE', 2)
+else
+  amd_uncore_lib_shared = 'e_smi64'
+  amd_uncore_lib_static = 'e_smi64_static'
+
+  amd_uncore_dep_shared = cc.find_library (amd_uncore_lib_shared, required: false, dirs: '/opt/e-sms/e_smi/lib/')
+  amd_uncore_dep_static = cc.find_library (amd_uncore_lib_static, required: false, dirs: '/opt/e-sms/e_smi/lib/static/', static: true)
+
+  if amd_uncore_dep_static.found()
+    dpdk_conf.set('RTE_HAS_LIBAMDUNCORE', 3)
+  elif amd_uncore_dep_shared.found()
+    message ((amd_uncore_dep_static.found().to_string()))
+    dpdk_conf.set('RTE_HAS_LIBAMDUNCORE', 4)
+    dpdk_extra_ldflags += '-le_smi64'
+  endif
+endif
+
 # for clang 32-bit compiles we need libatomic for 64-bit atomic ops
 if cc.get_id() == 'clang' and dpdk_conf.get('RTE_ARCH_64') == false
     atomic_dep = cc.find_library('atomic', required: true)
diff --git a/doc/guides/prog_guide/power_man.rst b/doc/guides/prog_guide/power_man.rst
index f6674efe2d..3d9b6ba527 100644
--- a/doc/guides/prog_guide/power_man.rst
+++ b/doc/guides/prog_guide/power_man.rst
@@ -249,6 +249,57 @@ Get Num Pkgs
 Get Num Dies
   Get the number of die's on a given package.
 
+AMD Uncore API
+--------------
+
+Abstract
+~~~~~~~~
+
+Uncore is a term used by AMD to describe the functions of EPYC SoC
+that are not in the core, but which must be closely connected to the core
+to achieve high performance: GMI interconnect to compute chiplet, L3 cache,
+on-die memory controller, XGMI PCIe interconnect etc.
+Determinsitic performance & power savings can be achieved by altering the default
+settings of uncore.
+
+API Overview for AMD Uncore
+~~~~~~~~~~~~~~~~~~~~~~~~~~~
+
+Overview of each function in the AMD Uncore API,
+with explanation of what they do.
+Each function should not be called in the fast path.
+
+Uncore Init
+  Initialize uncore module of the AMD EPYC SoC for power, frequency, link width
+  per socket to each Compute Complex.
+
+Uncore Power Exit
+  Exit uncore module for the SoC.
+
+Get Uncore Power Freq
+  Get current uncore freq index for die on pkg.
+
+Set Uncore Power Freq
+  Set min & max uncore freq index for die on pkg
+  to specified index value (min and max will be the same).
+
+Uncore Power Max
+  Set min & max uncore freq to maximum frequency index for die on pkg
+  (min and max will be the same).
+
+Uncore Power Min
+  Set min & max uncore freq to minimum frequency index for die on pkg
+  (min and max will be the same).
+
+Get Num Freqs
+  Get the number of frequencies in the index array.
+
+Get Num Pkgs
+  Get the number of packages (CPU's) on the system.
+
+Get Num Dies
+  Get the number of die's on a given package.
+
 References
 ----------
 
diff --git a/lib/power/meson.build b/lib/power/meson.build
index b8426589b2..f26258e54c 100644
--- a/lib/power/meson.build
+++ b/lib/power/meson.build
@@ -11,6 +11,7 @@ if not is_linux
     build = false
     reason = 'only supported on Linux'
 endif
+
 sources = files(
         'guest_channel.c',
         'power_acpi_cpufreq.c',
@@ -24,12 +25,36 @@ sources = files(
         'rte_power_uncore.c',
         'rte_power_pmd_mgmt.c',
 )
+
 headers = files(
         'rte_power.h',
         'rte_power_guest_channel.h',
         'rte_power_pmd_mgmt.h',
         'rte_power_uncore.h',
 )
+
+if dpdk_conf.get('RTE_HAS_LIBAMDUNCORE') == 1
+      ext_deps += amd_uncore_dep_static
+      sources += files('power_amd_uncore.c')
+elif dpdk_conf.get('RTE_HAS_LIBAMDUNCORE') == 2
+      ext_deps += amd_uncore_dep_shared
+      sources += files('power_amd_uncore.c')
+elif dpdk_conf.get('RTE_HAS_LIBAMDUNCORE') == 3
+    if cc.has_header('e_smi/e_smi.h', dependencies:amd_uncore_dep_static, include_directories: include_directories('/opt/e-sms/e_smi/include/'))
+      sources += files('power_amd_uncore.c')
+      cflags += '-I/opt/e-sms/e_smi/include/'
+      ext_deps += declare_dependency (link_args: ['/opt/e-sms/e_smi/lib/static/libe_smi64_static.a'])
+    endif
+elif dpdk_conf.get('RTE_HAS_LIBAMDUNCORE') == 4
+  if cc.has_header('e_smi/e_smi.h', dependencies:amd_uncore_dep_shared, include_directories: include_directories('/opt/e-sms/e_smi/include/'))
+      sources += files('power_amd_uncore.c')
+      cflags += '-I/opt/e-sms/e_smi/include/'
+      ext_deps += declare_dependency (link_args: ['/opt/e-sms/e_smi//lib/libe_smi64.so'])
+    endif
+endif
+
+
+
 if cc.has_argument('-Wno-cast-qual')
     cflags += '-Wno-cast-qual'
 endif
diff --git a/lib/power/power_amd_uncore.c b/lib/power/power_amd_uncore.c
new file mode 100644
index 0000000000..4402aacde8
--- /dev/null
+++ b/lib/power/power_amd_uncore.c
@@ -0,0 +1,141 @@
+/* SPDX-License-Identifier: BSD-3-Clause
+ * Copyright(c) 2024 AMD 
+ */
+
+#include <errno.h>
+#include <dirent.h>
+#include <fnmatch.h>
+#include <inttypes.h>
+
+#include <e_smi/e_smi.h>
+
+#include <rte_memory.h>
+
+#include "power_amd_uncore.h"
+#include "power_common.h"
+
+#define MAX_UNCORE_FREQS 32
+#define MAX_NUMA_DIE 8
+#define BUS_FREQ     100000
+
+struct __rte_cache_aligned uncore_power_info {
+	unsigned int die;                  /* Core die id */
+	unsigned int pkg;                  /* Package id */
+	uint32_t freqs[MAX_UNCORE_FREQS];  /* Frequency array */
+	uint32_t nb_freqs;                 /* Number of available freqs */
+	FILE *f_cur_min;                   /* FD of scaling_min */
+	FILE *f_cur_max;                   /* FD of scaling_max */
+	uint32_t curr_idx;                 /* Freq index in freqs array */
+	uint32_t org_min_freq;             /* Original min freq of uncore */
+	uint32_t org_max_freq;             /* Original max freq of uncore */
+	uint32_t init_max_freq;            /* System max uncore freq */
+	uint32_t init_min_freq;            /* System min uncore freq */
+};
+
+static struct uncore_power_info uncore_info[RTE_MAX_NUMA_NODES][MAX_NUMA_DIE];
+
+int
+power_amd_uncore_init(unsigned int pkg, unsigned int die)
+{
+	int ret =  esmi_init();
+	/* Init for setting uncore die frequency */
+	if (ESMI_SUCCESS != ret) {
+		POWER_LOG(DEBUG, "Cannot init for setting uncore frequency for "
+				"pkg %02u die %02u; reason '%s'", pkg, die, esmi_get_err_msg (ret));
+		return -1;
+	}
+
+	return 0;
+}
+
+int
+power_amd_uncore_exit(unsigned int pkg, unsigned int die)
+{
+	esmi_exit();
+
+	return 0;
+}
+
+uint32_t
+power_get_amd_uncore_freq(unsigned int pkg, unsigned int die)
+{
+	uint32_t fclk = 0, mclk = 0;
+	int socket = rte_lcore_to_socket_id (pkg);
+	socket = (SOCKET_ID_ANY == socket) ? 0 : socket;
+
+	esmi_status_t ret = esmi_fclk_mclk_get ((uint32_t)socket, &fclk, &mclk);
+	if (ESMI_SUCCESS != ret) {
+		POWER_LOG(DEBUG, "filed to get uncore frequency for "
+				"pkg %02u die %02u; reason '%s'", pkg, die, esmi_get_err_msg (ret));
+		return -1;
+	}
+
+	return fclk;
+}
+
+int
+power_set_amd_uncore_freq(unsigned int pkg, unsigned int die, uint32_t index)
+{
+	return 0;
+}
+
+int
+power_amd_uncore_freq_max(unsigned int pkg, unsigned int die)
+{
+	int socket = rte_lcore_to_socket_id (pkg);
+	socket = (SOCKET_ID_ANY == socket) ? 0 : socket;
+
+	/* ToDo: check the orginal frequency and new frequency and return 1 if changed */
+
+	esmi_status_t ret = esmi_df_pstate_range_set ((uint32_t)socket, 0, 0);
+	if (ESMI_SUCCESS != ret) {
+		POWER_LOG(DEBUG, "filed to set max uncore frequency for "
+				"pkg %02u die %02u; reason '%s'", pkg, die, esmi_get_err_msg (ret));
+		return -1;
+	}
+
+	return 1;
+}
+
+
+int
+power_amd_uncore_freq_min(unsigned int pkg, unsigned int die)
+{
+	unsigned int socket = rte_lcore_to_socket_id (pkg);
+	socket = (SOCKET_ID_ANY == socket) ? 0 : socket;
+
+	/* ToDo: check the orginal frequency and new frequency and return 1 if changed */
+
+	esmi_status_t ret = esmi_df_pstate_range_set (socket, 2, 2);
+	if (ESMI_SUCCESS != ret) {
+		POWER_LOG(DEBUG, "filed to set min uncore frequency for "
+				"pkg %02u die %02u; reason '%s'", pkg, die, esmi_get_err_msg (ret));
+		return -1;
+	}
+
+	return 1;
+}
+
+int
+power_amd_uncore_freqs(unsigned int pkg, unsigned int die, uint32_t *freqs, uint32_t num)
+{
+	return 0;
+}
+
+int
+power_amd_uncore_get_num_freqs(unsigned int pkg, unsigned int die)
+{
+	return 0;
+}
+
+unsigned int
+power_amd_uncore_get_num_pkgs(void)
+{
+	return 0;
+}
+
+unsigned int
+power_amd_uncore_get_num_dies(unsigned int pkg)
+{
+	return 0;
+}
diff --git a/lib/power/power_amd_uncore.h b/lib/power/power_amd_uncore.h
new file mode 100644
index 0000000000..be69379fb3
--- /dev/null
+++ b/lib/power/power_amd_uncore.h
@@ -0,0 +1,226 @@
+/* SPDX-License-Identifier: BSD-3-Clause
+ * Copyright(c) 2024 Intel Corporation
+ */
+
+#ifndef POWER_AMD_UNCORE_H
+#define POWER_AMD_UNCORE_H
+
+/**
+ * @file
+ * RTE Intel Uncore Frequency Management
+ */
+
+#include "rte_power.h"
+#include "rte_power_uncore.h"
+
+#ifdef __cplusplus
+extern "C" {
+#endif
+
+/**
+ * Initialize uncore frequency management for specific die on a package.
+ * It will get the available frequencies and prepare to set new die frequencies.
+ *
+ * This function should NOT be called in the fast path.
+ *
+ * @param pkg
+ *  Package number.
+ *  Each physical CPU in a system is referred to as a package.
+ * @param die
+ *  Die number.
+ *  Each package can have several dies connected together via the uncore mesh.
+ *
+ * @return
+ *  - 0 on success.
+ *  - Negative on error.
+ */
+int
+power_amd_uncore_init(unsigned int pkg, unsigned int die);
+
+/**
+ * Exit uncore frequency management on a specific die on a package.
+ * It will restore uncore min and* max values to previous values
+ * before initialization of API.
+ *
+ * This function should NOT be called in the fast path.
+ *
+ * @param pkg
+ *  Package number.
+ *  Each physical CPU in a system is referred to as a package.
+ * @param die
+ *  Die number.
+ *  Each package can have several dies connected together via the uncore mesh.
+ *
+ * @return
+ *  - 0 on success.
+ *  - Negative on error.
+ */
+int
+power_amd_uncore_exit(unsigned int pkg, unsigned int die);
+
+/**
+ * Return the current index of available frequencies of a specific die on a package.
+ * It should be protected outside of this function for threadsafe.
+ *
+ * This function should NOT be called in the fast path.
+ *
+ * @param pkg
+ *  Package number.
+ *  Each physical CPU in a system is referred to as a package.
+ * @param die
+ *  Die number.
+ *  Each package can have several dies connected together via the uncore mesh.
+ *
+ * @return
+ *  The current index of available frequencies.
+ *  If error, it will return 'RTE_POWER_INVALID_FREQ_INDEX = (~0)'.
+ */
+uint32_t
+power_get_amd_uncore_freq(unsigned int pkg, unsigned int die);
+
+/**
+ * Set minimum and maximum uncore frequency for specified die on a package
+ * to specified index value.
+ * It should be protected outside of this function for threadsafe.
+ *
+ * This function should NOT be called in the fast path.
+ *
+ * @param pkg
+ *  Package number.
+ *  Each physical CPU in a system is referred to as a package.
+ * @param die
+ *  Die number.
+ *  Each package can have several dies connected together via the uncore mesh.
+ * @param index
+ *  The index of available frequencies.
+ *
+ * @return
+ *  - 1 on success with frequency changed.
+ *  - 0 on success without frequency changed.
+ *  - Negative on error.
+ */
+int
+power_set_amd_uncore_freq(unsigned int pkg, unsigned int die, uint32_t index);
+
+/**
+ * Set minimum and maximum uncore frequency for specified die on a package
+ * to maximum value according to the available frequencies.
+ * It should be protected outside of this function for threadsafe.
+ *
+ * This function should NOT be called in the fast path.
+ *
+ * @param pkg
+ *  Package number.
+ *  Each physical CPU in a system is referred to as a package.
+ * @param die
+ *  Die number.
+ *  Each package can have several dies connected together via the uncore mesh.
+ *
+ * @return
+ *  - 1 on success with frequency changed.
+ *  - 0 on success without frequency changed.
+ *  - Negative on error.
+ */
+int
+power_amd_uncore_freq_max(unsigned int pkg, unsigned int die);
+
+/**
+ * Set minimum and maximum uncore frequency for specified die on a package
+ * to minimum value according to the available frequencies.
+ * It should be protected outside of this function for threadsafe.
+ *
+ * This function should NOT be called in the fast path.
+ *
+ * @param pkg
+ *  Package number.
+ *  Each physical CPU in a system is referred to as a package.
+ * @param die
+ *  Die number.
+ *  Each package can have several dies connected together via the uncore mesh.
+ *
+ * @return
+ *  - 1 on success with frequency changed.
+ *  - 0 on success without frequency changed.
+ *  - Negative on error.
+ */
+int
+power_amd_uncore_freq_min(unsigned int pkg, unsigned int die);
+
+/**
+ * Return the list of available frequencies in the index array.
+ *
+ * This function should NOT be called in the fast path.
+ *
+ * @param pkg
+ *  Package number.
+ *  Each physical CPU in a system is referred to as a package.
+ * @param die
+ *  Die number.
+ *  Each package can have several dies connected together via the uncore mesh.
+ * @param freqs
+ *  The buffer array to save the frequencies.
+ * @param num
+ *  The number of frequencies to get.
+ *
+ * @return
+ *  - The number of available index's in frequency array.
+ *  - Negative on error.
+ */
+int
+power_amd_uncore_freqs(unsigned int pkg, unsigned int die,
+		unsigned int *freqs, unsigned int num);
+
+/**
+ * Return the list length of available frequencies in the index array.
+ *
+ * This function should NOT be called in the fast path.
+ *
+ * @param pkg
+ *  Package number.
+ *  Each physical CPU in a system is referred to as a package.
+ * @param die
+ *  Die number.
+ *  Each package can have several dies connected together via the uncore mesh.
+ *
+ * @return
+ *  - The number of available index's in frequency array.
+ *  - Negative on error.
+ */
+int
+power_amd_uncore_get_num_freqs(unsigned int pkg, unsigned int die);
+
+/**
+ * Return the number of packages (CPUs) on a system
+ * by parsing the uncore sysfs directory.
+ *
+ * This function should NOT be called in the fast path.
+ *
+ * @return
+ *  - Zero on error.
+ *  - Number of package on system on success.
+ */
+unsigned int
+power_amd_uncore_get_num_pkgs(void);
+
+/**
+ * Return the number of dies for pakckages (CPUs) specified
+ * from parsing the uncore sysfs directory.
+ *
+ * This function should NOT be called in the fast path.
+ *
+ * @param pkg
+ *  Package number.
+ *  Each physical CPU in a system is referred to as a package.
+ *
+ * @return
+ *  - Zero on error.
+ *  - Number of dies for package on sucecss.
+ */
+unsigned int
+power_amd_uncore_get_num_dies(unsigned int pkg);
+
+#ifdef __cplusplus
+}
+#endif
+
+#endif /* POWER_INTEL_UNCORE_H */
diff --git a/lib/power/rte_power_uncore.c b/lib/power/rte_power_uncore.c
index 48c75a5da0..d7d66143b0 100644
--- a/lib/power/rte_power_uncore.c
+++ b/lib/power/rte_power_uncore.c
@@ -5,12 +5,20 @@
 
 #include <errno.h>
 
+#include <cpuid.h>
+
 #include <rte_errno.h>
 #include <rte_spinlock.h>
 
 #include "power_common.h"
 #include "rte_power_uncore.h"
 #include "power_intel_uncore.h"
+#include "power_amd_uncore.h"
+
+#define x86_vendor_amd(t1, t2, t3)        \
+        ((t1 == 0x68747541) && /* htuA */   \
+         (t2 == 0x444d4163) && /* DMAc */   \
+         (t3 == 0x69746e65))   /* itne */
 
 enum rte_uncore_power_mgmt_env default_uncore_env = RTE_UNCORE_PM_ENV_NOT_SET;
 
@@ -96,6 +104,12 @@ reset_power_uncore_function_ptrs(void)
 int
 rte_power_set_uncore_env(enum rte_uncore_power_mgmt_env env)
 {
+	/* 
+	 * use CPUID to get vendor_id
+	 */
+	uint32_t a, b, c, d;
+	__cpuid(0, a, b, c, d);
+	bool is_amd_uncore = x86_vendor_amd(b, c, d);
 	int ret;
 
 	rte_spinlock_lock(&global_env_cfg_lock);
@@ -106,15 +120,29 @@ rte_power_set_uncore_env(enum rte_uncore_power_mgmt_env env)
 		return -1;
 	}
 
-	if (env == RTE_UNCORE_PM_ENV_AUTO_DETECT)
-		/* Currently only intel_uncore is supported.
+	if (env == RTE_UNCORE_PM_ENV_AUTO_DETECT) {
+		/* Currently only x86 uncore is supported.
 		 * This will be extended with auto-detection support
 		 * for multiple uncore implementations.
 		 */
-		env = RTE_UNCORE_PM_ENV_INTEL_UNCORE;
+		env = (is_amd_uncore) ? RTE_UNCORE_PM_ENV_AMD_HSMP : RTE_UNCORE_PM_ENV_INTEL_UNCORE;
+	}
 
 	ret = 0;
+	if ((env == RTE_UNCORE_PM_ENV_INTEL_UNCORE) && (env == RTE_UNCORE_PM_ENV_AMD_HSMP)
+			) {
+		POWER_LOG(ERR, "Invalid Power Management Environment(%d) set", env);
+		ret = -1;
+		goto out;
+	}
+
 	if (env == RTE_UNCORE_PM_ENV_INTEL_UNCORE) {
+		if (is_amd_uncore) {
+			POWER_LOG(ERR, "Invalid Power Management Environment(%d) set for the AMD platform!", env);
+			ret = -1;
+			goto out;
+		}
+
 		rte_power_get_uncore_freq = power_get_intel_uncore_freq;
 		rte_power_set_uncore_freq = power_set_intel_uncore_freq;
 		rte_power_uncore_freq_min  = power_intel_uncore_freq_min;
@@ -123,11 +151,25 @@ rte_power_set_uncore_env(enum rte_uncore_power_mgmt_env env)
 		rte_power_uncore_get_num_freqs = power_intel_uncore_get_num_freqs;
 		rte_power_uncore_get_num_pkgs = power_intel_uncore_get_num_pkgs;
 		rte_power_uncore_get_num_dies = power_intel_uncore_get_num_dies;
-	} else {
-		POWER_LOG(ERR, "Invalid Power Management Environment(%d) set", env);
-		ret = -1;
-		goto out;
 	}
+#if RTE_HAS_LIBAMDUNCORE > 0
+	else if (env == RTE_UNCORE_PM_ENV_AMD_HSMP) {
+		if (false == is_amd_uncore) {
+			POWER_LOG(ERR, "Invalid Power Management Environment(%d) set for the INTEL platform!", env);
+			ret = -1;
+			goto out;
+		}
+
+		rte_power_get_uncore_freq = power_get_amd_uncore_freq;
+		rte_power_set_uncore_freq = power_set_amd_uncore_freq;
+		rte_power_uncore_freq_min  = power_amd_uncore_freq_min;
+		rte_power_uncore_freq_max  = power_amd_uncore_freq_max;
+		rte_power_uncore_freqs = power_amd_uncore_freqs;
+		rte_power_uncore_get_num_freqs = power_amd_uncore_get_num_freqs;
+		rte_power_uncore_get_num_pkgs = power_amd_uncore_get_num_pkgs;
+		rte_power_uncore_get_num_dies = power_amd_uncore_get_num_dies;
+	}
+#endif
 
 	default_uncore_env = env;
 out:
@@ -158,6 +200,11 @@ rte_power_uncore_init(unsigned int pkg, unsigned int die)
 	switch (default_uncore_env) {
 	case RTE_UNCORE_PM_ENV_INTEL_UNCORE:
 		return power_intel_uncore_init(pkg, die);
+#if RTE_HAS_LIBAMDUNCORE > 0
+	case RTE_UNCORE_PM_ENV_AMD_HSMP:
+		return power_amd_uncore_init(pkg, die);
+#endif
+
 	default:
 		POWER_LOG(INFO, "Uncore Env isn't set yet!");
 		break;
@@ -186,6 +233,10 @@ rte_power_uncore_exit(unsigned int pkg, unsigned int die)
 	switch (default_uncore_env) {
 	case RTE_UNCORE_PM_ENV_INTEL_UNCORE:
 		return power_intel_uncore_exit(pkg, die);
+#if RTE_HAS_LIBAMDUNCORE > 1
+	case RTE_UNCORE_PM_ENV_AMD_HSMP:
+		return power_amd_uncore_exit(pkg, die);
+#endif
 	default:
 		POWER_LOG(ERR, "Uncore Env has not been set, unable to exit gracefully");
 		break;
